#!/bin/bash
#
#   bootstrap creates a LFS self hosting toolchain
#   Copyright (C) 2014 Michael Rosset

#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.

#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -ehu

xpwd=$PWD
user=$USER
term=$TERM
home=$HOME

unset $(env | awk -F= '/^\w/ {print $1}' | xargs)

# enviroment
export HOME=$home
export PWD=$xpwd
export USER=$user
export TERM=$term
export LC_ALL="POSIX"

BOOTSTRAP="$PWD"

# check we are in the right directory
if [[ ! -f $BOOTSTRAP/bin/bootstrap ]]; then
	echo This needs to be run in boostrap directory eg. bin/bootstrap
	exit 1
fi

# toolchain tweaks
export CFLAGS="-O2 -pipe"
export CPPFLAGS="$CFLAGS"
export MAKEFLAGS="-sw"
export LIBTOOLFLAGS="--silent"

LFS_TGT="x86_64-lfs-linux-gnu"
#TARGET="arm-unknown-linux-gnueabi"
#TARGET="i686-linux-gnu"
LFS="$HOME/root"
PREFIX="$HOME/tools"

# strip
INSTALL="install-strip"

export PATH=$HOME/bin:$PREFIX/bin:/bin:/usr/bin

# create sysroot and link tools directory this is recursive
mkdir -p $LFS/$PREFIX
ln -fs $LFS/$PREFIX $PREFIX

case $LFS_TGT in
	arm*-*)
		ARCH=arm
		MFLAGS=""
		#MFLAGS="--with-march=armv7"
		;;
	x86_64-*)
		ARCH=x86_64
		MFLAGS=""
		;;
	i686-*)
		ARCH=i386
		MFLAGS=""
		;;
	*)
		echo "$TARGET:" unknown arch
		exit 1
		;;
esac

# Dirs
SRC="$BOOTSTRAP/src"
BLD="$BOOTSTRAP/bld"
TAR="$BOOTSTRAP/tar"
PRG="$BOOTSTRAP/prg"

COMMON_FLAGS="
	--prefix=$PREFIX
	--disable-bootstrap
	--disable-manpages
	--disable-nls
	--without-manpages
	--config-cache -q"

# Mirrors
GNU_MIRROR="http://mirrors.kernel.org/gnu"


lfs_chroot() {
	docker run -i -t bootstrap $PREFIX/bin/env -i \
		EDITOR=vim                  \
		HOME=$HOME					\
		TERM="$TERM"                \
		PS1='\u:\w\$ '              \
		PATH=/bin:/usr/bin:/sbin:/usr/sbin:$PREFIX/bin:$PREFIX/usr/bin \
		$PREFIX/bin/bash --login +h
	exit 0
}

is_done() {
	if [[ -f $PRG/$1.done ]]; then
		#echo "$1 done skipping."
		return 0;
	else
		return 1;
	fi
}

mk_build_dir() {
	[[ -d $BLD/$1 ]] && return 0
	mkdir -p "$BLD/$1"
}

stage() {
	local file=$1
	local dir="${file%.*.*}"
	[[ -d $SRC/$dir ]] && return 0
	echo "staging $1"
	tar xf "$TAR/$1" -C "$SRC"
	return 0
}

get() {
	[[ -f $TAR/$(/usr/bin/basename $1) ]] && return 0
	pushd "$TAR"
		/usr/bin/wget -c "$1"
	popd
}

SED_VERSION="4.2.2"

tools_sed() {
	local name="sed"
	local ver="$SED_VERSION"
	local ext="tar.bz2"
	local file="$name-$ver.$ext"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$name/$file"
	stage $file
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$name-$ver/configure --prefix=$PREFIX -q
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

cross_texinfo() {
	local n="texinfo"
	local v="4.13a"
	local e="tar.gz"
	local f="$n-$v.$e"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$n/$f"
	stage $n $v $e
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$n-4.13/configure $COMMON_FLAGS
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

native_compiler() {
	local upstream="http://landley.net/aboriginal/downloads/binaries/root-filesystem/native-compiler-x86_64.tar.bz2"
	local file="$(/usr/bin/basename $upstream)"

	is_done $FUNCNAME && return 0

	get $upstream
	stage $file
	mv "$SRC/${file%.*.*}" .
	touch "$PRG/$FUNCNAME.done"
	#get $upstream
}


BINUTILS_VERSION="2.24"

stage1_binutils() {
	local name="binutils"
	local ver="$BINUTILS_VERSION"
	local file="$name-$ver.tar.bz2"
	local flags="\
		--with-sysroot=$LFS        \
		--with-lib-path=/tools/lib \
		--target=$LFS_TGT          \
		--disable-nls              \
		--disable-werror"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$name/$file"
	stage "$file"
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$name-$ver/configure $COMMON_FLAGS $flags
		make configure-host
		make
		make install
		mkdir -v $PREFIX/lib && ln -sv lib $PREFIX/lib64
		touch "$PRG/$FUNCNAME.done"
	popd
}

MPC_VERSION="1.0.2"

stage2_mpc() {
	local name="mpc"
	local version="$MPC_VERSION"
	local ext="tar.gz"
	local file="$name-$version.$ext"
	local flags="--with-gmp=$PREFIX"
	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$name/$file"
	stage $file
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$name-$version/configure --prefix=$PREFIX $flags -q
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

MPFR_VERSION="3.1.2"

stage2_mpfr() {
	local name="mpfr"
	local version="$MPFR_VERSION"
	local ext="tar.xz"
	local file="$name-$version.$ext"
	local flags="--with-gmp=$PREFIX"
	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$name/$file"
	stage $file
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$name-$version/configure --prefix=$PREFIX $flags -q
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

GMP_VERSION="6.0.0a"

stage2_gmp() {
	local name="gmp"
	local version="$GMP_VERSION"
	local ext="tar.xz"
	local file="$name-$version.$ext"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$name/$file"
	stage $file
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$name-6.0.0/configure --prefix=$PREFIX -q
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

GCC_VERSION="4.9.2"

stage1_gcc() {
	local name="gcc"
	local version="$GCC_VERSION"
	local ext="tar.bz2"
	local file="$name-$version.$ext"

	local flags="\
		--target=$LFS_TGT                                \
		--with-sysroot=$LFS                              \
		--with-newlib                                    \
		--without-headers                                \
		--with-local-prefix=$PREFIX                      \
		--with-native-system-header-dir=$PREFIX/include  \
		--disable-nls                                    \
		--disable-shared                                 \
		--disable-multilib                               \
		--disable-decimal-float                          \
		--disable-threads                                \
		--disable-libatomic                              \
		--disable-libgomp                                \
		--disable-libitm                                 \
		--disable-libquadmath                            \
		--disable-libsanitizer                           \
		--disable-libssp                                 \
		--disable-libvtv                                 \
		--disable-libcilkrts                             \
		--disable-libstdc++-v3                           \
		--enable-languages=c,c++"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$name/$name-$version/$file"
	get "$GNU_MIRROR/mpfr/mpfr-3.1.2.tar.xz"
	get "$GNU_MIRROR/gmp/gmp-6.0.0a.tar.xz"
	get "$GNU_MIRROR/mpc/mpc-1.0.2.tar.gz"

	stage $file
	stage mpfr-3.1.2.tar.xz
	stage gmp-6.0.0a.tar.xz
	stage mpc-1.0.2.tar.gz

	mk_build_dir $FUNCNAME

	pushd "$SRC/$name-$version"
	ln -sf ../gmp-6.0.0  gmp
	ln -sf ../mpc-$MPC_VERSION  mpc
	ln -sf ../mpfr-$MPFR_VERSION mpfr

	if [[ ! -f $PRG/${FUNCNAME}_patch ]]; then
		sed -i '/k prot/agcc_cv_libc_provides_ssp=yes' gcc/configure
		for file in \
			$(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
	do
		cp -uv $file{,.orig}
		sed -e "s@/lib\(64\)\?\(32\)\?/ld@$PREFIX&@g" \
			-e "s@/usr@$PREFIX@g" $file.orig > $file
		echo "
		#undef STANDARD_STARTFILE_PREFIX_1
		#undef STANDARD_STARTFILE_PREFIX_2
		#define STANDARD_STARTFILE_PREFIX_1 \"$PREFIX/lib/\"
		#define STANDARD_STARTFILE_PREFIX_2 \"\"" >> $file
		touch $file.orig
	done
	touch "$PRG/${FUNCNAME}_patch.done"
	fi
	popd

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$name-$version/configure $COMMON_FLAGS $flags
		make all
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

LINUX_VERSION="3.17.2"

linux_headers() {
	local name="linux"
	local version="$LINUX_VERSION"
	local ext="tar.xz"
	local file="$name-$version.$ext"

	is_done $FUNCNAME && return 0

	get "https://www.kernel.org/pub/linux/kernel/v3.x/$file"
	stage $file

	# build
	pushd "$SRC/$name-$version"
		make mrproper
		make ARCH=$ARCH headers_check
		make ARCH=$ARCH INSTALL_HDR_PATH="$PREFIX" headers_install
		touch "$PRG/$FUNCNAME.done"
	popd
}

GLIBC_VERSION="2.20"

stage1_glibc() {
	local name="glibc"
	local version="$GLIBC_VERSION"
	local ext="tar.xz"
	local file="$name-$version.$ext"
	local flags="\
		--host=$LFS_TGT                                 \
		--build=$($SRC/glibc-2.20/scripts/config.guess) \
		--disable-profile                               \
		--enable-kernel=2.6.32                          \
		--with-headers=$PREFIX/include                  \
		libc_cv_forced_unwind=yes                       \
		libc_cv_ctors_header=yes                        \
		libc_cv_c_cleanup=yes"

	is_done $FUNCNAME && return 0
	get "$GNU_MIRROR/$name/$file"
	stage $file

	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$name-$version/configure $COMMON_FLAGS $flags
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd

}

stage1_libstdc++() {
	local name="gcc"
	local version="$GCC_VERSION"
	local flags="\
		--host=$LFS_TGT                 \
		--disable-multilib              \
		--disable-shared                \
		--disable-nls                   \
		--disable-libstdcxx-threads     \
		--disable-libstdcxx-pch         \
		--with-gxx-include-dir=$PREFIX/$LFS_TGT/include/c++/$version"

	is_done $FUNCNAME && return 0
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$name-$version/libstdc++-v3/configure $COMMON_FLAGS $flags
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd

}

test_gcc() {
	in=test/main.c
	out=$(mktemp)
	$LFS_TGT-gcc $in -o $out
	readelf -l $out | grep ": $PREFIX"
	rm $out
}

stage2_binutils() {
	local name="binutils"
	local version="$BINUTILS_VERSION"
	local flags="\
		CC=$LFS_TGT-gcc                \
		AR=$LFS_TGT-ar                 \
		RANLIB=$LFS_TGT-ranlib         \
		--disable-nls                  \
		--disable-werror               \
		--with-lib-path=$PREFIX/lib    \
		--with-sysroot"

	is_done $FUNCNAME && return 0
	mk_build_dir $FUNCNAME

	pushd "$BLD/$FUNCNAME"
		"$SRC/$name-$version/configure" $COMMON_FLAGS $flags
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

stage2_gcc() {
	local name="gcc"
	local version="$GCC_VERSION"
	local flags="\
		CC=$LFS_TGT-gcc                                  \
		CXX=$LFS_TGT-g++                                 \
		AR=$LFS_TGT-ar                                   \
		RANLIB=$LFS_TGT-ranlib                           \
		--with-local-prefix=$PREFIX                      \
		--with-native-system-header-dir=$PREFIX/include  \
		--enable-languages=c                             \
		--disable-libstdcxx-pch                          \
		--disable-multilib                               \
		--disable-bootstrap                              \
		--disable-libgomp"

	is_done $FUNCNAME && return 0

	mk_build_dir $FUNCNAME

	pushd "$SRC/$name-$version"
		cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
			`dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h
	popd

	# build
	pushd "$BLD/$FUNCNAME"
		"$SRC/$name-$version/configure" $COMMON_FLAGS $flags
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

BASH_VERSION="4.3"

tools_bash() {
	local name="bash"
	local ver="$BASH_VERSION"
	local ext="tar.gz"
	local file="$name-$ver.$ext"
	local flag="--with-gnu-malloc"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$name/$file"
	stage $file
	[[ ! -d $BLD/$FUNCNAME ]] && cp -a "$SRC/$name-$ver" "$BLD/$FUNCNAME"
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$name-$ver/configure $COMMON_FLAGS $flag
		make
		make install
		install -d $LFS/bin
		ln -sf $PREFIX/bin/bash $LFS/bin/sh
		ln -sf $PREFIX/bin/bash $LFS/bin/bash
		touch "$PRG/$FUNCNAME.done"
	popd
}

tools_vim() {
	local name="vim"
	local ver="7.4"
	local ext="tar.bz2"
	local file="$name-$ver.$ext"
	local flags="ac_cv_lib_ICE_IceConnectionNumber=no"

	is_done $FUNCNAME && return 0

	get "ftp://ftp.vim.org/pub/vim/unix/vim-$ver.$ext"
	[[ ! -d "$SRC/${name}74}" ]] && stage $file
	mk_build_dir $FUNCNAME

	# build
	pushd "$SRC/${name}74"
		./configure $COMMON_FLAGS $flags
		make
		make install
		ln -s vim $PREFIX/bin/vi
		touch "$PRG/$FUNCNAME.done"
	popd
}

tools_toybox() {
	file="toybox-$ARCH"
	get "http://landley.net/toybox/bin/$file"
	install -d "$PREFIX/usr/bin"
	install -d "$PREFIX/usr/sbin"
	install $TAR/$file $PREFIX/bin/toybox
	for i in $($PREFIX/bin/toybox --long); do
		ln -sfv "$PREFIX/bin/toybox" "$PREFIX/$i"
	done
	touch "$PRG/$FUNCNAME.done"
}

COREUTILS_VERSION="8.23"

tools_coreutils() {
	local name="coreutils"
	local ver="$COREUTILS_VERSION"
	local ext="tar.xz"
	local file="$name-$ver.$ext"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$name/$file"
	stage $file
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$name-$ver/configure $COMMON_FLAGS
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

tools_nurses() {
	local name="ncurses"
	local ver="5.9"
	local ext="tar.gz"
	local file="$name-$ver.$ext"
	local flags="\
		--with-shared   \
		--without-debug \
		--without-ada   \
		--enable-overwrite"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$name/$file"
	stage $file
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$name-$ver/configure $COMMON_FLAGS $flags
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

tools_zlib() {
	local name="zlib"
	local ver="1.2.8"
	local ext="tar.gz"
	local file="$name-$ver.$ext"
	local flags=""

	is_done $FUNCNAME && return 0

	get "http://zlib.net/$file"
	stage $file
	mk_build_dir $FUNCNAME

	# build
	pushd "$SRC/$name-$ver"
		./configure --prefix=$PREFIX
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

tools_git() {
	local name="git"
	local ver="2.1.3"
	local ext="tar.xz"
	local file="$name-$ver.$ext"
	local flags=""

	is_done $FUNCNAME && return 0

	get "https://www.kernel.org/pub/software/scm/git/$file"
	stage $file
	mk_build_dir $FUNCNAME

	# build
	pushd "$SRC/$name-$ver"
		./configure $COMMON_FLAGS $flags
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

MAKE_VERSION="3.82"

tools_make() {
	local name="make"
	local ver="$MAKE_VERSION"
	local ext="tar.gz"
	local file="$name-$ver.$ext"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$name/$file"
	stage $file
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$name-$ver/configure $COMMON_FLAGS
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

tools_grep() {
	local name="grep"
	local ver="2.20"
	local ext="tar.xz"
	local file="$name-$ver.$ext"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$name/$file"
	stage $file
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$name-$ver/configure $COMMON_FLAGS
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

tools_gawk() {
	local name="gawk"
	local ver="4.1.1"
	local ext="tar.xz"
	local file="$name-$ver.$ext"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$name/$file"
	stage $file
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$name-$ver/configure $COMMON_FLAGS
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

tools_autoconf() {
	local name="autoconf"
	local ver="2.69"
	local ext="tar.xz"
	local file="$name-$ver.$ext"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$name/$file"
	stage $file
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$name-$ver/configure $COMMON_FLAGS
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

strip_all() {
	strip $PREFIX/libexec/gcc/*/$GCC_VERSION/* || true
	strip --strip-debug $PREFIX/lib/* || true
	strip --strip-unneeded $PREFIX/{,s}bin/* || true
}


tools_filesystem() {
	is_done $FUNCNAME && return 0
	mkdir -pv $LFS/{root,tmp,dev,proc,sys,run}
	fakeroot mknod -m 600 $LFS/dev/console c 5 1
	fakeroot mknod -m 666 $LFS/dev/null c 1 3
	touch "$PRG/$FUNCNAME.done"
}

tarball() {
	#strip_all
	tar -C $LFS -vc . -f $BOOTSTRAP/root-$LFS_TGT.tar
}

for i in $SRC $BLD $TAR $PRG; do
	if [[ ! -d $i ]]; then
		mkdir -p -v $i
	fi
done

if [[ $1 == chroot ]]; then
	lfs_chroot
	exit 0
fi

if [[ $1 == build ]]; then
	#native_compiler
	time(
	stage1_binutils
	stage1_gcc
	linux_headers
	stage1_glibc
	test_gcc
	stage1_libstdc++
	stage2_binutils
	stage2_gcc
	test_gcc
	tools_filesystem
	)
fi

if [[ $1 == tools ]]; then
	time(
	tools_coreutils
	tools_nurses
	tools_bash
	tools_vim
	tools_sed
	tools_make
	tools_grep
	tools_gawk
	)
	#tools_zlib
	#tools_git
	#tools_autoconf
	#tools_filesystem
fi

if [[ $1 == docker ]]; then
	docker rm $(docker ps -aq) || true
	docker rmi $(docker images -q) || true
	tar -C $LFS -c . | docker import - bootstrap
fi

if [[ $1 == tarball ]]; then
	time tarball
fi
