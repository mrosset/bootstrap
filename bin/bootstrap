#!/bin/bash

set -ehu

xpwd=$PWD
user=$USER
term=$TERM
home=$HOME

unset `env | awk -F= '/^\w/ {print $1}' | xargs`

# enviroment
export HOME=$home
export PWD=$xpwd
export USER=$user
export TERM=$term
export LC_ALL="POSIX"
export PATH=$HOME/bin:/opt/tools/bin:/bin:/usr/bin

# toolchain tweaks
export CFLAGS="-O2 -pipe"
export MAKEFLAGS="-j4 -sw"
export LIBTOOLFLAGS="--silent"

#TARGET="x86_64-linux-uclibc"
TARGET="arm-unknown-linux-gnueabi"
#TARGET="i686-linux-gnu"
PREFIX="$HOME/tools/"
SYSROOT="$PREFIX/$TARGET"

case $TARGET in
	arm*-*)
		ARCH=arm
		MFLAGS=""
		#MFLAGS="--with-march=armv7"
		;;
	x86_64-*)
		ARCH=x86_64
		MFLAGS=""
		;;
	i686-*)
		ARCH=i386
		MFLAGS=""
		;;
	*)
		echo "$TARGET:" unknown arch
		exit 1
		;;
esac

# Dirs
BOOTSTRAP="$HOME/build"
SRC="$BOOTSTRAP/src"
BLD="$BOOTSTRAP/bld"
TAR="$BOOTSTRAP/tar"
PRG="$BOOTSTRAP/prg"

COMMON_FLAGS="--target=$TARGET \
	--prefix=$PREFIX \
	--disable-nls \
	--with-sysroot=$SYSROOT \
	--disable-multilib \
	--disable-bootstrap \
	--enable-threads \
	--disable-werror \
	--config-cache \
	$MFLAGS \
	-q"

# Mirrors
GNU_MIRROR="http://mirrors.kernel.org/gnu"

is_done() {
	if [[ -f $PRG/$1.done ]]; then
		echo $1 done skipping.
		return 0;
	else
		return 1;
	fi
}

mk_build_dir() {
	[[ -d $BLD/$1 ]] && return 0
	mkdir "$BLD/$1"
}

stage() {
	d="$1-$2"
	[[ -d $SRC/$d ]] && return 0
	echo staging $1-$2
	tar xf $TAR/$d.$3 -C "$SRC"
	return 0
}

get() {
	[[ -f $TAR/$(basename $1) ]] && return 0
	pushd $TAR
		wget -c $1
	popd
}

cross_sed() {
	local n="sed"
	local v="4.2"
	local e="tar.gz"
	local f="$n-$v.$e"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$n/$f"
	stage $n $v $e
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$n-$v/configure --prefix=$PREFIX -q
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

cross_texinfo() {
	local n="texinfo"
	local v="4.13a"
	local e="tar.gz"
	local f="$n-$v.$e"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$n/$f"
	stage $n $v $e
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$n-4.13/configure $COMMON_FLAGS
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

cross_make() {
	local n="make"
	local v="3.82"
	local e="tar.gz"
	local f="$n-$v.$e"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$n/$f"
	stage $n $v $e
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$n-$v/configure $COMMON_FLAGS
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

cross_binutils() {
	local n="binutils"
	local v="2.23.1"
	local e="tar.gz"
	local f="$n-$v.$e"

	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$n/$f"
	stage $n $v $e 
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$n-$v/configure $COMMON_FLAGS
		make configure-host
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

cross_gcc() {
	local n="gcc"
	local v="4.7.3"
	local e="tar.bz2"
	local f="$n-$v.$e"
	local flags="--disable-decimal-float \
		--disable-threads \
		--disable-libmudflap \
		--with-native-system-header-dir=$SYSROOT \
		--disable-libssp \
		--disable-shared \
		--disable-libgomp \
		--disable-libquadmath \
		--disable-target-libiberty  \
		--disable-target-zlib \
		--without-headers \
		--without-ppl \
		--without-cloog \
		--with-newlib \
		--prefix=$PREFIX \
		--enable-languages=c"


	is_done $FUNCNAME && return 0

	get "$GNU_MIRROR/$n/$n-$v/$f"
	stage $n $v $e 
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		$SRC/$n-$v/configure $COMMON_FLAGS $flags
		make all-gcc all-target-libgcc
		make install-gcc install-target-libgcc
		touch "$PRG/$FUNCNAME.done"
	popd
}

linux_headers() {
	local n="linux"
	local v="3.7.1"
	local e="tar.bz2"
	local f="$n-$v.$e"

	is_done $FUNCNAME && return 0

	get "https://www.kernel.org/pub/linux/kernel/v3.x/$f"
	stage $n $v $e

	# build
	pushd "$SRC/$n-$v"
		make mrproper
		make ARCH=$ARCH headers_check
		make ARCH=$ARCH INSTALL_HDR_PATH="$SYSROOT/usr" headers_install

		touch "$PRG/$FUNCNAME.done"
	popd
}

uclibc() {
	local n="uClibc"
	local v="0.9.33.2"
	local e="tar.xz"
	is_done $FUNCNAME && return 0

	get "http://www.uclibc.org/downloads/$n-$v.$e"
	stage $n $v $e
	pushd "$SRC/$n-$v"
		cp $BOOTSTRAP/uclibc-$ARCH.config .config
		sed -i "s/XTARGETX/$TARGET/g" .config
		make install
		touch "$PRG/$FUNCNAME.done"
	popd

}

glibc_headers() {
	export MAKEFLAGS="-j4 -s -w"
	local n="eglibc"
	local v="2.13"
	local r="r13356"
	local e="tar.bz2"
	local f="$n-$v-$r.$e"

	local flags="--prefix=/usr \
		--host=$TARGET \
		--with-headers=$SYSROOT/usr/include \
		--disable-profile \
		--without-gd \
		--without-cvs \
		--enable-add-ons \
		--enable-kernel=2.6.39"

	is_done $FUNCNAME && return 0

	local mirror="http://ftp.cross-lfs.org/pub/clfs/clfs-packages/1.2.0"
	get "$mirror/$f"
	get "$mirror/eglibc-ports-2.13-r13356.tar.bz2"
	get "$mirror/eglibc-2.13-r13356-dl_dep_fix-1.patch"

	if [[ ! -d $SRC/$n-$v ]]; then
		stage $n $v-$r $e
		stage $n-ports $v-$r  $e
		cp -a "$SRC/ports" "$SRC/$n-$v/ports"
		pushd "$SRC/eglibc-$v"
			patch -p1 -i "$TAR/eglibc-2.13-r13356-dl_dep_fix-1.patch"
		popd
	fi

	mk_build_dir $FUNCNAME
	# build
	pushd "$BLD/$FUNCNAME"
		"$SRC/$n-$v/configure" $COMMON_FLAGS $flags
		make install-headers install_root="$SYSROOT" install-bootstrap-headers=yes

		make csu/subdir_lib
		mkdir -p $SYSROOT/usr/lib
		cp csu/crt1.o csu/crti.o csu/crtn.o $SYSROOT/usr/lib

		$TARGET-gcc -nostdlib -nostartfiles -shared -x c /dev/null \
			-o "$SYSROOT/usr/lib/libc.so"

		touch "$PRG/$FUNCNAME.done"
	popd

}

stage2_gcc() {
	local n="gcc"
	local v="4.7.3"
	local e="tar.bz2"
	local flags="--disable-libssp \
		--disable-libquadmath \
		--disable-libmudflap \
		--disable-libgomp \
		--enable-languages=c" 

	is_done $FUNCNAME && return 0

	stage $n $v $e 
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		"$SRC/$n-$v/configure" $COMMON_FLAGS $flags
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

final_glibc() {
	local n="eglibc"
	local v="2.13"
	local r="r13356"
	local e="tar.bz2"
	local flags="--prefix=/usr \
		--host=$TARGET \
		--with-headers=$SYSROOT/usr/include \
		--disable-profile \
		--without-gd \
		--without-cvs \
		--enable-add-ons \
		--enable-kernel=2.6.39"

	is_done $FUNCNAME && return 0

	if [[ ! -d $SRC/$n-$v ]]; then
		stage $n $v-$r $e
		stage $n-ports $v-$r  $e
		cp -a "$SRC/ports" "$SRC/$n-$v/ports"
	fi

	mk_build_dir $FUNCNAME
	# build
	pushd "$BLD/$FUNCNAME"
		"$SRC/$n-$v/configure" $COMMON_FLAGS $flags
		make all
		make install install_root=$SYSROOT
		touch "$PRG/$FUNCNAME.done"
	popd

}

final_gcc() {
	local n="gcc"
	local v="4.7.3"
	local e="tar.bz2"
	local f="--disable-libssp \
		--disable-libgomp \
		--disable-libmudflap \
		--disable-libquadmath \
		--enable-static \
		--enable-languages=c"

	is_done $FUNCNAME && return 0

	stage $n $v $e 
	mk_build_dir $FUNCNAME

	# build
	pushd "$BLD/$FUNCNAME"
		"$SRC/$n-$v/configure" $COMMON_FLAGS $f
		make
		make install
		touch "$PRG/$FUNCNAME.done"
	popd
}

for i in $SRC $BLD $TAR $PRG; do
	if [[ ! -d $i ]]; then 
		mkdir -v $i
	fi
done

cross_sed
cross_make
cross_binutils
cross_gcc
linux_headers
#uclibc
glibc_headers
stage2_gcc
final_glibc
final_gcc
